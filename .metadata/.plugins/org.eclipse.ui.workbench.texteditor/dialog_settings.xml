<?xml version="1.0" encoding="UTF-8"?>
<section name="Workbench">
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog">
		<item key="wrap" value="true"/>
		<item key="casesensitive" value="false"/>
		<item key="wholeword" value="false"/>
		<item key="incremental" value="false"/>
		<item key="isRegEx" value="false"/>
		<item key="selection" value="&#x0D;&#x0A;                   public class Main2 {&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x09;&#x09;Outer2 outer = new Outer2();&#x0D;&#x0A;&#x09;&#x09;outer.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;Aclass a = new Aclass();&#x0D;&#x0A;&#x09;&#x09;Inter i = new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;i.a();&#x0D;&#x0A;&#x09;&#x09;a.b(i);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a.b(new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;});&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A a0 = new A();&#x0D;&#x0A;&#x09;&#x09;a0.func();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A1 a1 = new A1();&#x0D;&#x0A;&#x09;&#x09;a1.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a2 = new A3();&#x0D;&#x0A;&#x09;&#x09;A3 a3 = new A3();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a2.b();&#x0D;&#x0A;&#x09;&#x09;a3.b();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a4 = new A2.B1() {&#x0D;&#x0A;&#x09;&#x09;&#x09;@Override&#x0D;&#x0A;&#x09;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스로 객체 생성&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x09;&#x09;a4.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface Inter {&#x0D;&#x0A;&#x09;void a();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Aclass {&#x0D;&#x0A;&#x09;void b(Inter i) { // 인터페이스 객체 i는 추상 메서드의 선언을 완료해야 한다.&#x0D;&#x0A;&#x09;&#x09;i.a(); // 추상 메서드는 메서드 선언이 완료되지 않았기 때문에 사용할 수 없다. X&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A {&#x0D;&#x0A;&#x09;int a = 1;&#x0D;&#x0A;&#x09;C c = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;class B implements C {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;인스턴스 이너클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;B b = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void func() {&#x0D;&#x0A;&#x09;&#x09;c.b();&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface C {&#x0D;&#x0A;&#x09;void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A1 {&#x0D;&#x0A;&#x09;B b = new B() {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface B {&#x0D;&#x0A;&#x09;public abstract void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A2 {&#x0D;&#x0A;&#x09;interface B1 { // 내부 인터페이스&#x0D;&#x0A;&#x09;&#x09;public abstract void b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A3 implements A2.B1 {&#x0D;&#x0A;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;System.out.println(&quot;내부 인터페이스의 메서드 구현&quot;);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;// 3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;// 메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;// 메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;// 주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 4. 익명 내부클래스 (Anonymous inner class)&#x0D;&#x0A;// 이름이 없는 클래스 → 주로 한번만 사용되는 간단한 클래스를 구현할 때 사용된다.&#x0D;&#x0A;// 보통 인터페이스나 추상 클래스의 구현체로 사용된다.&#x0D;&#x0A;// 클래스 정의와 함께 인스턴스를 생성하여 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 내부 인터페이스 (Inner Interface) : 하나의 클래스 안에 인터페이스를 선언하는 것.&#x0D;&#x0A;// 외부 클래스의 특정 기능을 구현하기 위해 사용된다.&#x0D;&#x0A;// 내부 인터페이스는 인터페이스의 모든 가능을 가지고, 외부 클래스의 멤버에 해당한다.&#x0D;&#x0A;&#x0D;&#x0A;// 외부 클래스와 마찬가지로 접근지정자 설정이 가능하다.&#x0D;&#x0A;// 내부 인터페이스는 멤버 변수와 메서드 또한 가질 수 있다."/>
		<list key="findhistory">
			<item value="&#x0D;&#x0A;                   public class Main2 {&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x09;&#x09;Outer2 outer = new Outer2();&#x0D;&#x0A;&#x09;&#x09;outer.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;Aclass a = new Aclass();&#x0D;&#x0A;&#x09;&#x09;Inter i = new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;i.a();&#x0D;&#x0A;&#x09;&#x09;a.b(i);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a.b(new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;});&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A a0 = new A();&#x0D;&#x0A;&#x09;&#x09;a0.func();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A1 a1 = new A1();&#x0D;&#x0A;&#x09;&#x09;a1.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a2 = new A3();&#x0D;&#x0A;&#x09;&#x09;A3 a3 = new A3();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a2.b();&#x0D;&#x0A;&#x09;&#x09;a3.b();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a4 = new A2.B1() {&#x0D;&#x0A;&#x09;&#x09;&#x09;@Override&#x0D;&#x0A;&#x09;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스로 객체 생성&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x09;&#x09;a4.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface Inter {&#x0D;&#x0A;&#x09;void a();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Aclass {&#x0D;&#x0A;&#x09;void b(Inter i) { // 인터페이스 객체 i는 추상 메서드의 선언을 완료해야 한다.&#x0D;&#x0A;&#x09;&#x09;i.a(); // 추상 메서드는 메서드 선언이 완료되지 않았기 때문에 사용할 수 없다. X&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A {&#x0D;&#x0A;&#x09;int a = 1;&#x0D;&#x0A;&#x09;C c = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;class B implements C {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;인스턴스 이너클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;B b = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void func() {&#x0D;&#x0A;&#x09;&#x09;c.b();&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface C {&#x0D;&#x0A;&#x09;void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A1 {&#x0D;&#x0A;&#x09;B b = new B() {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface B {&#x0D;&#x0A;&#x09;public abstract void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A2 {&#x0D;&#x0A;&#x09;interface B1 { // 내부 인터페이스&#x0D;&#x0A;&#x09;&#x09;public abstract void b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A3 implements A2.B1 {&#x0D;&#x0A;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;System.out.println(&quot;내부 인터페이스의 메서드 구현&quot;);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;// 3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;// 메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;// 메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;// 주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 4. 익명 내부클래스 (Anonymous inner class)&#x0D;&#x0A;// 이름이 없는 클래스 → 주로 한번만 사용되는 간단한 클래스를 구현할 때 사용된다.&#x0D;&#x0A;// 보통 인터페이스나 추상 클래스의 구현체로 사용된다.&#x0D;&#x0A;// 클래스 정의와 함께 인스턴스를 생성하여 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 내부 인터페이스 (Inner Interface) : 하나의 클래스 안에 인터페이스를 선언하는 것.&#x0D;&#x0A;// 외부 클래스의 특정 기능을 구현하기 위해 사용된다.&#x0D;&#x0A;// 내부 인터페이스는 인터페이스의 모든 가능을 가지고, 외부 클래스의 멤버에 해당한다.&#x0D;&#x0A;&#x0D;&#x0A;// 외부 클래스와 마찬가지로 접근지정자 설정이 가능하다.&#x0D;&#x0A;// 내부 인터페이스는 멤버 변수와 메서드 또한 가질 수 있다."/>
			<item value="&#x0D;&#x0A;public class Main2 {&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x09;&#x09;Outer2 outer = new Outer2();&#x0D;&#x0A;&#x09;&#x09;outer.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;Aclass a = new Aclass();&#x0D;&#x0A;&#x09;&#x09;Inter i = new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;i.a();&#x0D;&#x0A;&#x09;&#x09;a.b(i);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a.b(new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;});&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;A a0 = new A();&#x0D;&#x0A;&#x09;&#x09;a0.func();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A1 a1 = new A1();&#x0D;&#x0A;&#x09;&#x09;a1.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a2 = new A3();&#x0D;&#x0A;&#x09;&#x09;A3 a3 = new A3();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a2.b();&#x0D;&#x0A;&#x09;&#x09;a3.b();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a4 = new A2.B1() {&#x0D;&#x0A;&#x09;&#x09;&#x09;@Override&#x0D;&#x0A;&#x09;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스로 객체 생성&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x09;&#x09;a4.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface Inter {&#x0D;&#x0A;&#x09;void a();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Aclass {&#x0D;&#x0A;&#x09;void b(Inter i) { // 인터페이스 객체 i는 추상 메서드의 선언을 완료해야 한다.&#x0D;&#x0A;&#x09;&#x09;i.a(); // 추상 메서드는 메서드 선언이 완료되지 않았기 때문에 사용할 수 없다. X&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A {&#x0D;&#x0A;&#x09;int a = 1;&#x0D;&#x0A;&#x09;C c = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;class B implements C {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;인스턴스 이너클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;B b = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void func() {&#x0D;&#x0A;&#x09;&#x09;c.b();&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface C {&#x0D;&#x0A;&#x09;void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A1 {&#x0D;&#x0A;&#x09;B b = new B() {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface B {&#x0D;&#x0A;&#x09;public abstract void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A2 {&#x0D;&#x0A;&#x09;interface B1 { // 내부 인터페이스&#x0D;&#x0A;&#x09;&#x09;public abstract void b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A3 implements A2.B1 {&#x0D;&#x0A;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;System.out.println(&quot;내부 인터페이스의 메서드 구현&quot;);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;// 3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;// 메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;// 메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;// 주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 4. 익명 내부클래스 (Anonymous inner class)&#x0D;&#x0A;// 이름이 없는 클래스 → 주로 한번만 사용되는 간단한 클래스를 구현할 때 사용된다.&#x0D;&#x0A;// 보통 인터페이스나 추상 클래스의 구현체로 사용된다.&#x0D;&#x0A;// 클래스 정의와 함께 인스턴스를 생성하여 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 내부 인터페이스 (Inner Interface) : 하나의 클래스 안에 인터페이스를 선언하는 것.&#x0D;&#x0A;// 외부 클래스의 특정 기능을 구현하기 위해 사용된다.&#x0D;&#x0A;// 내부 인터페이스는 인터페이스의 모든 가능을 가지고, 외부 클래스의 멤버에 해당한다.&#x0D;&#x0A;&#x0D;&#x0A;// 외부 클래스와 마찬가지로 접근지정자 설정이 가능하다.&#x0D;&#x0A;// 내부 인터페이스는 멤버 변수와 메서드 또한 가질 수 있다."/>
			<item value="&#x0D;&#x0A;                public class Main2 {&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x09;&#x09;Outer2 outer = new Outer2();&#x0D;&#x0A;&#x09;&#x09;outer.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;Aclass a = new Aclass();&#x0D;&#x0A;&#x09;&#x09;Inter i = new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;i.a();&#x0D;&#x0A;&#x09;&#x09;a.b(i);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a.b(new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;});&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A1 a1 = new A1();&#x0D;&#x0A;&#x09;&#x09;a1.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a2 = new A3();&#x0D;&#x0A;&#x09;&#x09;A3 a3 = new A3();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a2.b();&#x0D;&#x0A;&#x09;&#x09;a3.b();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a4 = new A2.B1() {&#x0D;&#x0A;&#x09;&#x09;&#x09;@Override&#x0D;&#x0A;&#x09;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스로 객체 생성&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x09;&#x09;a4.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface Inter {&#x0D;&#x0A;&#x09;void a();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Aclass {&#x0D;&#x0A;&#x09;void b(Inter i) { // 인터페이스 객체 i는 추상 메서드의 선언을 완료해야 한다.&#x0D;&#x0A;&#x09;&#x09;i.a(); // 추상 메서드는 메서드 선언이 완료되지 않았기 때문에 사용할 수 없다. X&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A {&#x0D;&#x0A;&#x09;int a = 1;&#x0D;&#x0A;&#x09;C c = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;class B implements C {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;인스턴스 이너클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;&#x09;B b = new B();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void func() {&#x0D;&#x0A;&#x09;&#x09;c.b();&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface C {&#x0D;&#x0A;&#x09;void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A1 {&#x0D;&#x0A;&#x09;B b = new B() {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface B {&#x0D;&#x0A;&#x09;public abstract void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A2 {&#x0D;&#x0A;&#x09;interface B1 { // 내부 인터페이스&#x0D;&#x0A;&#x09;&#x09;public abstract void b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A3 implements A2.B1 {&#x0D;&#x0A;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;System.out.println(&quot;내부 인터페이스의 메서드 구현&quot;);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;// 3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;// 메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;// 메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;// 주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 4. 익명 내부클래스 (Anonymous inner class)&#x0D;&#x0A;// 이름이 없는 클래스 → 주로 한번만 사용되는 간단한 클래스를 구현할 때 사용된다.&#x0D;&#x0A;// 보통 인터페이스나 추상 클래스의 구현체로 사용된다.&#x0D;&#x0A;// 클래스 정의와 함께 인스턴스를 생성하여 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 내부 인터페이스 (Inner Interface) : 하나의 클래스 안에 인터페이스를 선언하는 것.&#x0D;&#x0A;// 외부 클래스의 특정 기능을 구현하기 위해 사용된다.&#x0D;&#x0A;// 내부 인터페이스는 인터페이스의 모든 가능을 가지고, 외부 클래스의 멤버에 해당한다.&#x0D;&#x0A;&#x0D;&#x0A;// 외부 클래스와 마찬가지로 접근지정자 설정이 가능하다.&#x0D;&#x0A;// 내부 인터페이스는 멤버 변수와 메서드 또한 가질 수 있다."/>
			<item value="&#x0D;&#x0A;public class Main2 {&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x09;&#x09;Outer2 outer = new Outer2();&#x0D;&#x0A;&#x09;&#x09;outer.a();&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;Aclass a = new Aclass();&#x0D;&#x0A;&#x09;&#x09;Inter i = new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;i.a();&#x0D;&#x0A;&#x09;&#x09;a.b(i);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;a.b(new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;});&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;A1 a1 = new A1();&#x0D;&#x0A;&#x09;&#x09;a1.a();&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a2 = new A3();&#x0D;&#x0A;&#x09;&#x09;A3 a3 = new A3();&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;a2.b();&#x0D;&#x0A;&#x09;&#x09;a3.b();&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;A2.B1 a4 = new A2.B1() {&#x0D;&#x0A;&#x09;&#x09;&#x09;@Override&#x0D;&#x0A;&#x09;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스로 객체 생성&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x09;&#x09;a4.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface Inter {&#x0D;&#x0A;&#x09;void a();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Aclass {&#x0D;&#x0A;&#x09;void b(Inter i) { // 인터페이스 객체 i는 추상 메서드의 선언을 완료해야 한다.&#x0D;&#x0A;&#x09;&#x09;i.a(); // 추상 메서드는 메서드 선언이 완료되지 않았기 때문에 사용할 수 없다. X&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A{&#x0D;&#x0A;&#x09;int a=1;&#x0D;&#x0A;&#x09;C c = new B();&#x0D;&#x0A;&#x09;&#x0D;&#x0A;&#x09;class B implements C{&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;인스턴스 이너클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x09;&#x0D;&#x0A;&#x09;B b = new B();&#x0D;&#x0A;&#x09;void func() {&#x0D;&#x0A;&#x09;&#x09;c.b();&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface C{&#x0D;&#x0A;&#x09;void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A1{&#x0D;&#x0A;&#x09;B b = new B() {&#x0D;&#x0A;&#x09;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(&quot;익명내부클래스&quot;);&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;};&#x0D;&#x0A;&#x09;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;b.b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface B{&#x0D;&#x0A;&#x09;public abstract void b();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A2{&#x0D;&#x0A;&#x09;interface B1{ // 내부 인터페이스&#x0D;&#x0A;&#x09;&#x09;public abstract void b();&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class A3 implements A2.B1{&#x0D;&#x0A;&#x09;public void b() {&#x0D;&#x0A;&#x09;&#x09;System.out.println(&quot;내부 인터페이스의 메서드 구현&quot;);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;// 3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;// 메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;// 메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;// 주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 4. 익명 내부클래스 (Anonymous inner class)&#x0D;&#x0A;// 이름이 없는 클래스 → 주로 한번만 사용되는 간단한 클래스를 구현할 때 사용된다.&#x0D;&#x0A;// 보통 인터페이스나 추상 클래스의 구현체로 사용된다.&#x0D;&#x0A;// 클래스 정의와 함께 인스턴스를 생성하여 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 내부 인터페이스 (Inner Interface) : 하나의 클래스 안에 인터페이스를 선언하는 것.&#x0D;&#x0A;// 외부 클래스의 특정 기능을 구현하기 위해 사용된다.&#x0D;&#x0A;// 내부 인터페이스는 인터페이스의 모든 가능을 가지고, 외부 클래스의 멤버에 해당한다.&#x0D;&#x0A;&#x0D;&#x0A;// 외부 클래스와 마찬가지로 접근지정자 설정이 가능하다.&#x0D;&#x0A;// 내부 인터페이스는 멤버 변수와 메서드 또한 가질 수 있다."/>
			<item value="&#x0D;&#x0A;public class Main2 {&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x09;&#x09;Outer2 outer = new Outer2();&#x0D;&#x0A;&#x09;&#x09;outer.a();&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;Aclass a = new Aclass();&#x0D;&#x0A;&#x09;&#x09;Inter i = new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;};&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;i.a();&#x0D;&#x0A;&#x09;&#x09;a.b(i);&#x0D;&#x0A;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;a.b(new Inter() {&#x0D;&#x0A;&#x09;&#x09;&#x09;public void a() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(&quot;매개변수 전달&quot;);&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;);&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;interface Inter{&#x0D;&#x0A;&#x09;void a();&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Aclass{&#x0D;&#x0A;&#x09;void b(Inter i) { // 인터페이스 객체 i는 추상 메서드의 선언을 완료해야 한다.&#x0D;&#x0A;&#x09;&#x09;i.a(); // 추상 메서드는 메서드 선언이 완료되지 않았기 때문에 사용할 수 없다. X&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;// 3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;// 메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;// 메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;// 주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;&#x0D;&#x0A;// 4. 익명 내부클래스 (Anonymous inner class)&#x0D;&#x0A;// 이름이 없는 클래스 → 주로 한번만 사용되는 간단한 클래스를 구현할 때 사용된다.&#x0D;&#x0A;// 보통 인터페이스나 추상 클래스의 구현체로 사용된다.&#x0D;&#x0A;// 클래스 정의와 함께 인스턴스를 생성하여 사용한다."/>
			<item value="&#x0D;&#x0A;public class Main2 {&#x0D;&#x0A;&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;                         class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;System.out.println(b);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;//3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;//메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;//메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;//주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;//4. 익명 내부클래스 (Anonymous inner class)"/>
			<item value="&#x0D;&#x0A;public class Main2 {&#x0D;&#x0A;&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;System.out.println(b);&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class A {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;class B {&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;//3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;//메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;//메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;//주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;//4. 익명 내부클래스 (Anonymous inner class)"/>
			<item value="&#x0D;&#x0A;public class Main2 {&#x0D;&#x0A;&#x0D;&#x0A;&#x09;public static void main(String[] args) {&#x0D;&#x0A;&#x0D;&#x0A;&#x09;}&#x0D;&#x0A;&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;class Outer2 {&#x0D;&#x0A;&#x09;int a = 3;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;void a() {&#x0D;&#x0A;&#x09;&#x09;final int b = 4;&#x0D;&#x0A;&#x0D;&#x0A;&#x09;&#x09;class Inner2 {&#x0D;&#x0A;&#x09;&#x09;&#x09;void b() {&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 3&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(b); // 4&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 5;&#x0D;&#x0A;//&#x09;&#x09;&#x09;&#x09;b=6; // 지역이너클래스에서 사용되는 지역변수는 자동으로 final&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;a = 1;&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x09;System.out.println(a); // 1&#x0D;&#x0A;&#x09;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;}&#x0D;&#x0A;&#x09;&#x09;&#x09;Inner2 inner = new Inner2();&#x0D;&#x0A;&#x09;&#x09;&#x09;inner.b();&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x0D;&#x0A;//&#x09;&#x09;&#x09;b=5;&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(a); // 5&#x0D;&#x0A;&#x09;&#x09;&#x09;System.out.println(b);&#x0D;&#x0A;&#x09;&#x09;&#x09;&#x0D;&#x0A;&#x09;&#x09;&#x09;class A{}&#x0D;&#x0A;&#x09;&#x09;&#x09;class B{}&#x0D;&#x0A;}&#x0D;&#x0A;}&#x0D;&#x0A;&#x0D;&#x0A;//3. 지역 내부클래스 (Local inner class)&#x0D;&#x0A;//메서드나 볼록 내부에 정의되는 이너클래스&#x0D;&#x0A;//메서드 내에서만 사용되며 해당 메서드 내에서만 유효하다.&#x0D;&#x0A;//주로 메서드 내부에서 임시적으로 사용되는 클래스를 정의할 때 사용한다.&#x0D;&#x0A;//4. 익명 내부클래스 (Anonymous inner class)"/>
		</list>
		<list key="replacehistory">
		</list>
	</section>
	<section name="org.eclipse.ui.texteditor.FindReplaceDialog_dialogBounds">
		<item key="DIALOG_X_ORIGIN" value="785"/>
		<item key="DIALOG_Y_ORIGIN" value="217"/>
		<item key="DIALOG_WIDTH" value="369"/>
		<item key="DIALOG_HEIGHT" value="454"/>
		<item key="DIALOG_FONT_NAME" value="1|맑은 고딕|9.0|0|WINDOWS|1|-15|0|0|0|400|0|0|0|1|0|0|0|0|맑은 고딕"/>
	</section>
</section>
